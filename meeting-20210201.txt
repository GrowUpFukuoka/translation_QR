20210203
2月1日に引き継ぎに関して13時から15時まで黒崎さん、佐伯さん、磯嵜で話しました。
磯嵜がメモしたところをテキストデータに起こしました。


以下はchatworkのGrow-upWebに載せたまとめ。
====================================================

本日佐伯さんとこれからの引き継ぎ業務について話し合いました。
議題としては以下の3つでした。

・翻訳QRについて(デザインの保守、実装の説明、環境構築に関して、など)
・汎用CMSについて(「汎用」の共通認知、期間内の制作の可否、システム構造の確認、など)
・公園ポータルサイトについて(公開までの残り工程、データの保守・追加、仕様書の質と量と書き方について)


以下概要です。
佐伯さんは「汎用CMS」について主に動いていただけることになりました。翻訳QRも公園ポータルサイトもLaravelでの実装ですが、(既にそれぞれのシステムについて書いていただいたドキュメントに加えて)汎用CMS向けに書いた「Laravelの説明」となるようなリファレンスによってGrow-upの中の学習者が学んで他の2つのシステムの保守や改修に取り組むということになりました。翻訳QRや公園ポータルサイトに関わるメンバーは佐伯さんのGitHubアカウントの公園ポータルサイトリポジトリ( sasasa /koen )のproject「引継ぎに関連する情報 #47」に質問事項や残して欲しいドキュメントの要望などを投げることになります。

概要は以上。


もう少しそれぞれの議題について話したことを書きます。

翻訳QRについて
・デザインの変更はある程度vue.jsへの理解が必要である。(記法だけでも)
・コードを読む際のコツは「homeを探す」。巡ってviewファイルへたどり着く
・サーバ構築の仕方(勝手にできたフォルダを削除してシンボリックリンクにする)
・プリンター関連
・起こりえるトラブル(支払いの確認ができない)。

汎用CMSについて
・大まかな要件・仕様の確認(管理画面、管理ユーザー機能、アイテム機能、記事機能、抽象的な閲覧ユーザー機能)
・アイテム機能はタグ検索機能とユーザ投稿機能を持つ
・記事機能は投稿管理機能を持つ
・汎用CMSを優先する
・後に続くPHP・Laravel学習者のための説明ドキュメントを書く

公園ポータルサイトについて
・公開までの手順確認(ドメイン取得、デプロイ、初期データ入力、googleのsearchconsoleとアナリティクス入れる)
・公園データの追加方法
・引き継ぎの要望は引継ぎに関連する情報 #47」に残すこと

以上です。
====================================================
chatworkへの投稿は以上。
    
    
    
    
ここから13時前に佐伯さんがおいでにになってからの話。
まず１時間ほど状況を知ることを兼ねて翻訳QRの話題から入りました。
Q.あのままで翻訳QR納品できるか?

佐伯「一つ言えるのはデザインを会社ごとに変えるということ」

『デザインの問題』(見た目の保守、改修に関わる)
管理画面はどの会社でも同じでいいが、導入は会社ごとのデザインにしないといけない。

(翻訳QRのリポジトリをForkする)
黒崎「誰かがリーダーになるかGrow-upの新規で作ろう」

デザイン(改修)に関して
会社ごとに変えたほうがいいのは「４画面」ある。
・メニュー
・カートの中
・注文確定
・お会計(ありがとうございました)

(システムの中のフォルダにおいて)「resources」→「js」→「components」の中にvueファイルがある。
・menuComponent.vue「メニュー画面」
・orderComponent.vue「カートの中」と「(カートの中から遷移する)注文確定」と「(ダッシュボードから遷移する)注文・お会計」
・tanksComponent.vue「お会計(ありがとうございました)」

他にユーザーの目に触れるものとしてはローディング処理の「loading.vue」


vueファイルについて
vueファイルはコンパイルされてjsに書き換えられる。
(「infra」フォルダはDockerに関わるのものでlaravel独特のものではない)

「backend」フォルダがlaravelのアプリケーションでそこに入ってコマンドを実行する
run wath コマンド でコンパイルする。
「resouces」フォルダ下の「js」と「sas」がコンパイルされる。

「デザインを書き換えて run watch してビルドがかかるので画面にそれが表示される」


Q.磯嵜「htmlとcss部分だけを書き換えるとでデザイン変更に対応できない?」
佐伯「表現によってはできなくもない。テンプレートは1ファイルに3つ書く。
テンプレートを書き変えるならばvueの記法を理解していなければならない」
Q.磯嵜「vueの記法を理解していれば事故(デザインが書いた人間が把握できないほど崩れるなど)は防げる?」
佐伯「結構防げる」


データと表現の仕組み(流れで佐伯さんに説明していただいた)
axiosライブラリを用いる。vue.jsからaxiosを使ってサーバ(laravel)へリクエストする。
サーバ(laravel)はデータを抽出し、jsonデータとしてをvue.jsに展開して表示させる。
基本的に書き換えればいいのは「vue.jsのテンプレート」である。

 Q.磯嵜「静的表現に関わるものはそれでいい?」
 佐伯「それでいい」

 Q.磯嵜「vue.jsで書かないといけない?」
 佐伯「javascriptでも書けないこともないが返って複雑になり、難しい。
 vue.jsが現実的である」



佐伯「パスの一番下のここに...」(webブラウザのアドレスバーを指す)
『#/js/drink』 この部分が画面遷移すると変わる。

黒崎「(アドレスの#(/js/drink)より)左側の(ごちゃごちゃした文字列)はセッション?」
佐伯「(ごちゃごちゃした)長いのは席を特定する値。ハッシュ。どう説明すればいいかな...」
黒崎「自分としてはどこどこ弄ればデザインがどう変わってということがなんとかなればいい。
コードに慣れていけば」
佐伯「覚えるまで大変。laravelの仕組み覚えて扱えるようになる」
社長「おすすめの本は?もしくは勉強法は?」
佐伯「この本が一番いいが(手元のLaraval入門第2版)次出る本もいい本。薙野さんにはメールした。(動かして学ぶ！Laravel開発入門)」
黒崎「vue.jsの本は?」
佐伯「これからはじめるVue.js実践入門から学んだけどいい本かどうかは...」
佐伯「Reactは難しい。今はlaravelとvueの組み合わせが使いやすい」
佐伯「一番laravel覚えるのでいいのは自分の書いたコードを読むのがいいと思う。自分で言うんだけど。読んだり改造するだけでわかる」



見方としてはパターン決まってて...。
ブラウザのアドレスバーのパスの中に「/home/」とあるからこれを探す。
「routes」フォルダの中にweb.phpがあるので「home」を探す。

Route::get('/home', [HomeController::class, 'index'])->name('home');

HomeControllerを探す。(app/Http/Controller.php)

コントローラーのメソッドの中でviewを探す。（class HomeController extends Controllerの中で）


    public function index()
    {
        return view('home');
    }
ここで使用しているテンプレートがわかる。
「resourcesのviewsの中にhome.blade.phpがある」


「まとめるとweb.phpの中でパスを見てパスからコントローラの情報を得て、その中からviewファイルの情報見て飛んでいけばいい」
「ローカルで動くようにして(フレームワークの仕様を理解しきろうとせずに)それを触ったりするときに改造して
コントローラーを見つけて、そのメソッドを見つけて返しているviewのbladeを見つける。全部そのパターン」


Q.黒崎「別の環境でも翻訳QRは動かせる?」
佐伯「現在Xサーバで動いている」
黒崎「別の実環境に構築できるようにならないといけない。その手順は?」
佐伯「ドキュメントに残している(翻訳QRのリポジトリproject#123Xserver上に...)。
サーバの構築はlaravelをローカルで動かすのと変わらない。ただ1箇所Grow-upwebmaketingの下にサブドメイン作って
そのサブドメインのフォルダごとシンボリックリンクにする」
Q.黒崎「サブドメインの下にフォルダ作らずに?」
佐伯「そう。勝手にできたフォルダを削除してシンボリックリンクにする。そうすればこのパス
(Growupwebmaketing)で作れる」

Q.磯嵜「製品化されて現場で使用中にバグが見つかったら?」
黒崎「トラブルがあったら我々で調査する。どのURLで起きているか確認する。持ち帰ってテストしないと」
Q.磯嵜「現場まで行く?」
黒崎「その場合もあるが、ここから遠かったらスクショしてもらうなどして対応する。本当はバグの現場で確認したい」

Q.磯嵜「web上の入力からプリンターで紙を印刷して出力するまでの流れは?」
佐伯「ネット上に翻訳QRのサーバがあり、お店にPCがありアクセスする。PCにプリンタが接続してあって、管理画面から画面から画面から紙が出る様な操作すれば出てくる」

Q.磯嵜「プリンタ制御関係のライブラリは?」
佐伯「?」
黒崎「?」
佐伯「ブラウザで右クリック"印刷"をすれば出力される」
磯嵜「そう」

佐伯「出力されるデザイン(表現)に関しては基本的にはどのプリンタを選ぶかによる。選ぶプリンタによって表示が変わる」
黒崎「現場に行く必要がある。こちらで同じ環境ができればいいが...」

(座席管理ページにて)プリンタで出力されるデザインの修正の仕方を説明される
佐伯「"印刷"ってするとこうやって出てくる」(ブラウザ上で印刷イメージが出る)
web.php内に「prinnt」探して orderds.print.blade.phpに飛ぶ。
レイアウトは layouts.print.blade.phpなのでこのprint.cssを書き換える。
場合によっては print.bladeの方も変えないといけない。
文字のサイズ変更だけならprint.cssだけでいい。
佐伯「javascriptで印刷機能を使っている」

黒崎「会社のデザイン変更の件も絡む話だけど、ファイル名や設定ファイルを変数を使って別のbladeはまる様にするようにできないかと思う。
Aパターン、Bパターンなどお店ごとに。ゆくゆくは」

Q.磯嵜「製品化された後に大きな問題は?とんでもない損害が起きる様な状況は?」
黒崎「システム止まるのが一番恐い。Xサーバの稼働率は高いが、店側の問題で止まることある」
佐伯「こちら側の原因でない場合も先方が問題を切り分けられない状況も考えられる。難しい」
黒崎「無線LANだけの問題だったら直ると思う。LANの先にある問題だとしたらスマホテザリングして確かめてもらうとか」

Q.磯嵜「翻訳QRそのものが止まる状況は?」
佐伯「ない」
黒崎「Xサーバは再起動させられないから待つしかない。その場合の事前説明をしっかり取り引き先様にするしかない(別の決算方法で対応要請など)」

Q.磯嵜「翻訳QRそのものに関して起こりそうな不安要素などは?実装すべき機能などは?」
佐伯「paypay支払いで...」

「paypay支払いにおける支払い確認ができない状況がある」
「paypayで支払う」という操作後、『管理画面』の『売り上げ確認』で金額が表示(計上)されるがこの段階では支払いはできていない。
お客さんが支払った額がわからない。paypay手続きを完了して、しばらく待つと『ありがとうございました画面』に遷移するので、
店側はそれを見たなら「paypayでの支払いができた」ということが確かに知ることができる。
しかし、支払い後すぐにその（ありがとう）画面から移動してしまうことや、その(ありがとう)画面にカウントダウンで自動遷移する前に画面を消してしまうのが
内包する問題である。『確かにpaypyayにて支払いが完了したか否かを現場で確認する手段がない』

現状その問題を予防するには『ありがとうございました画面』を店側が確認するようにしてもらうしかない。

マクドナルドの用いるシステムでも同様の問題があり
「『ありがとうございました画面』まで戻ってください」のような案内がある。

(翻訳QRに)『paypay履歴確認』の機能があるがpaypayと契約したならここに「決済した」のデータが入ってくるかもしれない。
佐伯「『注文・会計確認』画面において「準備中」の状態にすればpaypay支払いをやめるように修正する」20210202
今現在このpaypay支払いにおける不安な要素は「仕様」とせざるを得ない。



(この辺りで１時間経過)
汎用的CMSについて
黒崎「機能を絞りに絞ったCMSを作ってもらいたい」
磯嵜が描いた落書きのような図を佐伯さんに見てもらう。
『管理画面』から『管理ユーザー』『閲覧ユーザー(後で詰めていく)』『記事』『お店(アイテム)』という文字に関係を表す線が伸びている。

黒崎さんの説明

アイテム
アイテムごとにユーザーがコメントを書く機能、タグ検索機能は欲しい

記事
SEO向けの読み物記事

閲覧ユーザー
とりあえず先に作っておくだけのもの


黒崎「ガッツリ作るのではなくて最低限このぐらいでという感じ。キーワード検索は無しの方向で」


Q.磯嵜「データベースに関しての仕様は?」
黒崎「一番単純なやつでやろうかという計画だった。フィールドひとつで、WHERE、LIKEでいいよねって。ちなみに公園のDBは?」
佐伯「タグ公園でどっちもマスタがあって、中間テーブルで叩いたり、中間テーブルで......」
黒崎「それを汎用CMSに流用できる?」
佐伯「できる」

Q.磯嵜「公園ポータルのシステムを削減したり、修正したりして汎用CMSできる?工数は１から作るより短くなったりする?」
佐伯「公園を使えば短くはなるが劇的に早くできるわけではない」
磯嵜「なら学習者のためにも佐伯さんのドキュメント書きやすさも鑑みて１から作ってもらったほうがいい?」
黒崎「そうね」

(この辺で１時間30分)
Q.磯嵜「(薙野さんの質問)公園ポータルサイトの公開までの残りの手順は?」
1.ドメインとって
2.デプロイして
3.初期データ入れて
4.googlesearchconsoleとかアナリティクスとかの設定をする。

Q.磯嵜「公開までの作業手をつけてから何日でできる?」
佐伯「1日」
黒崎「うん」
佐伯「ドメイン取れないと長くなる」
黒崎「その場合は...」
磯嵜「2~3日くらい?」
黒崎「そうね」

Q.磯嵜「公園ポータルサイトへ追加でCSVデータを読ませるには?」
現在はCSVフォルダにひとつだけCSVが入っていてそのファイル名と構造専用のコードでデータを作っている。ベタ打ち。

Q.磯嵜「(薙野さんの質問)仕様書はどの様なものになりそう?なるべく多く詳細に書いて欲しいが」
佐伯「仕様書というよりlaravelの説明書のようになりそうだが...」
磯嵜「却ってそのほうがいいかもしれない」
黒崎「うん」
磯嵜「そちらの方が書きやすい?」
佐伯「書きやすい。(コードをいくらか見せて)laravelがlaravelが分かればこういう事わかる。laravelが分かれば分かる」
黒崎「laravelだとurl見てルーティングつまりweb.phpで一連の流れを見てどの機能が、とか分かるから楽。
下の方にデバッグバーが出る。それを見て変数を見て...。公園ポータルには何かテクニカルなコードはある?
特別にリファレンスが必要なほどトリッキーなものは?」
佐伯「ない。jsほどPHPはトリッキーでない。基本的にlaravelが分かれば分かる」
黒崎「公園はvue.jsでなくbladeオンリー?」
佐伯「そう」
黒崎「なら、その分ハードルは下がる」
磯嵜「では、公園ポータルサイトシステムに関してのドキュメントより汎用CMSの方を厚くした方がいいように思える。
そこから学べるなら我々(学習者)の為にもなる」
佐伯「コードの読み解きがつらくならないようにドキュメントに関するものは何でも書いていこうと思う。思いつくままに。
引き継ぎに関するものは何でも公園ポータルリポジトリの『引継ぎに関連する情報 #47』に公園ポータルに限らず書いて欲しい」
黒崎「ありがとうございます」
磯嵜「ありがとうございます」
(15時前に終了)
